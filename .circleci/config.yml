# Golang CircleCI 2.0 configuration
version: 2.1

jobs:
  build:
    docker:
      - image: circleci/golang:1.13.6
    environment:
    working_directory: ~/workdir
    steps:
      - add_ssh_keys:
          fingerprints:
            - "6c:7e:c8:28:cd:0b:94:b6:c8:f1:3f:71:40:a1:6e:fd"
      - checkout
      - run: 
          name: build
          command: |
            echo "*** BUILD ***"
            git status
            export KUKU=$(git diff --exit-code ./README.txt | awk 'END{if (NR > 0) {print "true"} else {print "false"}}')
            echo "*** MODIFIED: $KUKU ***"
            sh $PWD/scripts/update_go_sum
            
  test:
    docker:
      - image: shimit/mbt_multi:0.3.0
    working_directory: ~/workdir
    steps:
      - checkout
      - run: echo "*** TEST ***"

  compliance:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/workdir
    steps:
      - checkout
      - run: echo "*** COMPLIANCE ***"
#      - run:
#          name: compliance check
#          command: |
#            pip3 install --user reuse
#            ~/.local/bin/reuse lint
            
  release:
    docker:
      - image: circleci/golang:1.13.3
    working_directory: ~/workdir
    steps:
      - add_ssh_keys:
          fingerprints:
            - "6c:7e:c8:28:cd:0b:94:b6:c8:f1:3f:71:40:a1:6e:fd"
      - checkout
      - run:
          name: bump version
          command: |
            #Make sure HEAD points to master
            git checkout master
            CURR_MBT_VERSION=$(cat ./VERSION)
            echo "Current release: ${CURR_MBT_VERSION}"
            echo "MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"
            MBT_VERSION=$(echo $CURR_MBT_VERSION |awk -F. -v MAJOR_VAR="$MAJOR" -v MINOR_VAR="$MINOR" -v PATCH_VAR="$PATCH" '{
              if (MAJOR_VAR == "true"){
                $1++
                $2=0
                $3=0
              } else if (MINOR_VAR == "true"){
                $2++
                $3=0
              } else if (PATCH_VAR == "true"){
                $3++
              } 
              printf "%d.%d.%d\n", $1, $2 ,$3 
            }')
            echo "New release: ${MBT_VERSION}"
            #Update new version in files
            sed  -i "s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./VERSION
            #Generate version file
            #Add all updated files to commit
            git add ./VERSION
            git config user.email "${MICHAWAI_REPO_USER_EMAIL}"
            git config user.name "${MICHAWAI_USER}"
            git commit --allow-empty -m "[skip ci] Bump version ${MBT_VERSION}"
            #Push commit directly to master
            git push -q https://github.com/michawai/aaa.git master
            #Tag
            git tag -a v${MBT_VERSION} -m "New release ${MBT_VERSION}"
            git push https://github.com/michawai/aaa.git v${MBT_VERSION}
      - run:
          name: release new version
          command: |
            #Make sure HEAD points to master
            git checkout master
            
  publish:
    docker:
      - image: circleci/node:13.1.0
    working_directory: ~/workdir
    steps:
      - add_ssh_keys:
          fingerprints:
            - "6c:7e:c8:28:cd:0b:94:b6:c8:f1:3f:71:40:a1:6e:fd"
      - checkout
      - run:
          name: publish to npm
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
      - run:
          name: remove dummy release tag
          command: |
            git push https://github.com/michawai/aaa.git --delete release
            
  image:
    docker:
      - image: circleci/golang:1.16
    working_directory: ~/workdir
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
#      - setup_remote_docker
#      - run:
#          name: install dependencies
#          command: |
#            apk add --no-cache \
#              py-pip=9.0.0-r1
#            pip install \
#              docker-compose==1.12.0
      - run:
          name: release image
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
            MBT_VERSION=$(cat ./VERSION)
            echo "Image release: ${MBT_VERSION}"
            #Push to Docker Hub
            sh $PWD/scripts/build_image ${MBT_VERSION} ${DOCKER_HUB_USER} ${DOCKER_HUB_TOKEN} "https://registry.hub.docker.com"

  ghpages:
    docker:
      - image: squidfunk/mkdocs-material:4.3.1
    working_directory: ~/workdir
    steps:
      - checkout
      - run: echo "*** DOCS ***"

workflows:
  version: 2
  on_pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - compliance:
          filters:
            branches:
              ignore: master
      - test:
          requires:
            - build
          filters:
            branches:
              ignore: master

  on_merge_build_test:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - compliance:
          filters:
            branches:
              only: master
      - test:
          requires:
            - build
          filters:
            branches:
              only: master

  on_tag_build_test_deploy:
    jobs:
      - build:
          filters:  # required since `release` has tag filters AND requires `build`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:  # required since `release` has tag filters AND requires `test`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - release:
          requires:
            - test
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - ghpages:
          requires:
            - test
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - publish:
          requires:
            - image
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - image:
          requires:
            - release
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
